/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,13],$V2=[1,33],$V3=[1,38],$V4=[1,14],$V5=[1,17],$V6=[1,26],$V7=[1,45],$V8=[1,29],$V9=[1,44],$Va=[1,43],$Vb=[1,39],$Vc=[1,46],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,40],$Vi=[5,11,31,36,41,42,43,63,82,84,87,136,137,144,148,149,150,151,152],$Vj=[1,50],$Vk=[1,68],$Vl=[1,67],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,55],$Vx=[1,56],$Vy=[1,75],$Vz=[2,56],$VA=[30,39,49,51,65,85,88,101,106,108,116,117,118,119,121,122,123,124,125,126,128,129],$VB=[1,84],$VC=[1,83],$VD=[2,202],$VE=[1,87],$VF=[1,86],$VG=[1,88],$VH=[2,204],$VI=[1,91],$VJ=[1,90],$VK=[1,95],$VL=[39,85],$VM=[2,215],$VN=[1,100],$VO=[1,99],$VP=[1,101],$VQ=[1,103],$VR=[1,104],$VS=[1,106],$VT=[1,112],$VU=[1,113],$VV=[1,114],$VW=[2,5,11,31,36,41,42,43,48,51,63,74,76,77,82,84,87,91,92,93,96,98,100,106,108,112,113,136,137,144,148,149,150,151,152],$VX=[30,33,39],$VY=[1,136],$VZ=[1,139],$V_=[1,141],$V$=[39,65],$V01=[2,156],$V11=[1,158],$V21=[37,49],$V31=[1,178],$V41=[1,179],$V51=[1,176],$V61=[30,39,49,51,65,85,88,101,108,116,117,118,119,121,122,123,124,125,126,128,129],$V71=[39,88],$V81=[30,39,49,51,65,85,88,108,116,117,118,119,121,122,123,124,125,126,128,129],$V91=[30,39,49,51,65,85,88,108,116,117],$Va1=[30,39,49,51,65,85,88,108,116,117,118,119],$Vb1=[30,39,49,51,65,85,88,108,116,117,118,119,121,122,123,124,125,126],$Vc1=[1,209],$Vd1=[1,214],$Ve1=[1,210],$Vf1=[1,211],$Vg1=[1,212],$Vh1=[1,213],$Vi1=[1,216],$Vj1=[1,217],$Vk1=[1,218],$Vl1=[1,225],$Vm1=[1,226],$Vn1=[1,227],$Vo1=[1,228],$Vp1=[30,39,45,49,51,65,85,88,101,106,108,116,117,118,119,121,122,123,124,125,126,128,129],$Vq1=[30,36,39,45,49,51,65,85,87,88,101,106,108,116,117,118,119,121,122,123,124,125,126,128,129],$Vr1=[1,240],$Vs1=[1,239],$Vt1=[2,78],$Vu1=[1,246],$Vv1=[30,37,39,40,45,49,51,63,65,84,85,88,101,106,108,116,117,118,119,121,122,123,124,125,126,128,129],$Vw1=[1,248],$Vx1=[1,253],$Vy1=[2,86],$Vz1=[1,264],$VA1=[30,39,45,51,65,76,88],$VB1=[2,67],$VC1=[1,268],$VD1=[30,40],$VE1=[2,36,41,48,51,63,74,76,77,82,84,87,91,92,93,96,98,100,106,108,112,113,136,137,144,148,149,150,151,152],$VF1=[30,101,106,116,117,118,119,121,122,123,124,125,126,128,129],$VG1=[1,304],$VH1=[51,85],$VI1=[39,51,85],$VJ1=[30,39,51,88],$VK1=[30,37,39,40,49,51,65,85,88,101,106,108,116,117,118,119,121,122,123,124,125,126,128,129],$VL1=[30,37,39,40,45,49,51,63,65,85,88,101,106,108,116,117,118,119,121,122,123,124,125,126,128,129],$VM1=[30,39,51,65,88],$VN1=[1,348],$VO1=[51,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"declstatement_list":4,"EOF":5,"declstatement":6,"import_statement":7,"semic_or_nl":8,"depend_statement":9,"function_def":10,"var_def":11,"variable_def":12,"enum_def":13,"struct_def":14,"expression":15,"statement_list":16,"statement":17,"super_call":18,"shortcuts_call":19,"has_statement":20,"var_declaration":21,"say_statement":22,"del_statement":23,"return_statement":24,"while_statement":25,"for_in_statement":26,"if_statement":27,"try_statement":28,"assignment":29,"؛":30,"IMPORT":31,"import_specifier":32,"FROM":33,"import_path":34,"import_list":35,"IDENTIFIER":36,"AS":37,"ALL":38,"،":39,".":40,"STRING":41,"DEPEND":42,"DECL":43,"type_decl":44,"=":45,"struct_decl":46,"struct_body":47,"COMPOSITE":48,":":49,"has_list":50,"END":51,"enum_decl":52,"enum_body":53,"ENUM":54,"enum_members":55,"function_decl":56,"function_ret":57,"body_block":58,"subfunc_decl":59,"PROMISE":60,"function_decl_name":61,"function_decl_params":62,"(":63,"param_list":64,")":65,"subfunc_decl_name":66,"param":67,"param_def":68,"DALA":69,"is_param_opt":70,"dala_params":71,"؟":72,"dala_param_types":73,"SUPER":74,"arg_list":75,"SHORTCUTS":76,"HAS":77,"has_list_elements":78,"has_list_element":79,"param_decl":80,"member_access":81,"SPREAD":82,"param_init":83,"[":84,"]":85,"composite_header":86,"{":87,"}":88,"string_list":89,"identifier_list":90,"DEF":91,"SAY":92,"DELETE":93,"wtype_expr":94,"WTYPE":95,"RETURN":96,"while_head":97,"WHILE":98,"for_in_head":99,"FOR":100,"IN":101,"if_head":102,"noend_block":103,"elif_clauses":104,"else_clause":105,"IF":106,"elif_head":107,"ELSE":108,"else_head":109,"try_head":110,"exept_head":111,"TRY":112,"EXCEPT":113,"array_access":114,"arithmetic":115,"+":116,"-":117,"×":118,"÷":119,"comparison":120,"EQ":121,"NEQ":122,"LT":123,"LTE":124,"GT":125,"GTE":126,"logical":127,"AND":128,"OR":129,"ternary":130,"function_call":131,"func_arg":132,"lambda_expr":133,"declare_dala":134,"await_expr":135,"AWAIT":136,"SELF":137,"object_literal":138,"property_list":139,"property":140,"array_elements":141,"spread_operator":142,"logical_negation":143,"NOT":144,"in_expression":145,"type_casting":146,"parenthesis_expr":147,"NUMBER":148,"TRUE":149,"FALSE":150,"NULL":151,"JNX":152,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"var_def",30:"؛",31:"IMPORT",33:"FROM",36:"IDENTIFIER",37:"AS",38:"ALL",39:"،",40:".",41:"STRING",42:"DEPEND",43:"DECL",45:"=",48:"COMPOSITE",49:":",51:"END",54:"ENUM",60:"PROMISE",63:"(",65:")",69:"DALA",72:"؟",74:"SUPER",76:"SHORTCUTS",77:"HAS",82:"SPREAD",84:"[",85:"]",87:"{",88:"}",91:"DEF",92:"SAY",93:"DELETE",95:"WTYPE",96:"RETURN",98:"WHILE",100:"FOR",101:"IN",106:"IF",108:"ELSE",112:"TRY",113:"EXCEPT",116:"+",117:"-",118:"×",119:"÷",121:"EQ",122:"NEQ",123:"LT",124:"LTE",125:"GT",126:"GTE",128:"AND",129:"OR",136:"AWAIT",137:"SELF",144:"NOT",148:"NUMBER",149:"TRUE",150:"FALSE",151:"NULL",152:"JNX"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[16,1],[16,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,1],[17,1],[17,1],[17,1],[17,2],[17,2],[17,1],[8,1],[7,4],[7,2],[32,1],[32,3],[32,1],[32,3],[35,1],[35,3],[34,1],[34,3],[34,1],[9,2],[12,4],[12,6],[12,4],[14,3],[46,2],[47,3],[13,3],[52,2],[53,3],[10,3],[10,3],[57,2],[57,3],[57,2],[57,0],[56,2],[61,2],[62,3],[59,2],[66,4],[64,0],[64,1],[64,3],[67,1],[67,6],[70,0],[70,1],[71,3],[73,0],[73,1],[73,3],[58,3],[58,2],[18,5],[19,2],[20,2],[50,0],[50,1],[78,1],[78,3],[79,1],[79,3],[79,3],[79,1],[68,1],[68,2],[80,2],[80,3],[80,5],[80,6],[80,6],[80,6],[80,3],[83,2],[55,1],[55,1],[89,1],[89,3],[90,1],[90,3],[21,2],[21,4],[21,2],[21,4],[21,4],[21,6],[21,5],[21,7],[21,2],[21,4],[86,1],[86,3],[22,2],[23,2],[94,2],[24,2],[24,1],[25,2],[97,2],[26,2],[99,4],[27,5],[27,4],[27,4],[27,3],[102,2],[104,2],[104,3],[107,3],[103,2],[105,2],[109,1],[28,4],[110,1],[111,1],[29,3],[29,3],[29,3],[115,3],[115,3],[115,3],[115,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[127,3],[127,3],[130,5],[131,4],[131,4],[131,4],[75,0],[75,1],[75,3],[132,1],[132,1],[132,3],[132,3],[133,4],[134,1],[135,2],[81,3],[81,3],[81,3],[81,3],[81,3],[81,5],[114,4],[114,4],[114,4],[138,3],[138,2],[139,1],[139,3],[140,3],[140,3],[140,1],[140,2],[141,0],[141,1],[141,3],[44,1],[44,3],[44,4],[44,1],[142,2],[143,2],[145,3],[146,2],[147,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[15,2],[15,1],[15,2],[15,3],[15,1],[15,1],[15,3],[15,4],[15,1],[15,1],[15,4],[15,1],[15,1],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, context) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var result = $$[$0-1].filter(Boolean).join(';');
		if (context.inlineParse) {
			return result;
		}
		let fileName = context.filePath.replace(context.projectPath, '.').replace('.جني', '.mjs');
		fileName = fileName.replace(__dirname, '.');
		fileName = fileName.replaceAll('/', '.').replace('..', '/');
		
		// make sure not to repeat last two names: ئساسية.ئساسية.جني becomes ئساسية.جني
		var nameArr = fileName.split('.');
		var lastName = nameArr[nameArr.length - 2];
		var lastLastName = nameArr[nameArr.length - 3];
		if (lastLastName) {
			if (lastName == lastLastName.replace('/', '')) {
				fileName = fileName.replace(lastName + '.', '');
			}
		}
		
		let outFilePath = path.join(context.outPath, fileName);
		
		fs.writeFile(outFilePath, result, { flag: 'w+' }, (err) => {
			if (err) {
				throw new Error('فشل حفض الملف: ' + outFilePath);
			}
		});	
		// get global scope
		var glob = yy.symbolScopes.exit();
		// remove import symbols from the scope
		glob.symbols = glob.symbols.filter(smb => !smb.isImport);
		glob.importName = fileName;
		return glob; // return global scope
    
break;
case 3: case 13:
 this.$ = [$$[$0]]; 
break;
case 4: case 14:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 6: case 8: case 9: case 15: case 17: case 18: case 19: case 20: case 21:
 this.$ = $$[$0-1]; 
break;
case 7: case 10: case 11: case 22: case 23: case 24: case 25: case 36: case 38: case 40:
 this.$ = $$[$0]; 
break;
case 12: case 26: case 27:
 this.$ = $$[$0-1].value; 
break;
case 16: case 28: case 62:
 this.$ = ''; 
break;
case 30:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ImportManager.setContext(context);
		
		var importSpecifier = $$[$0-2];
		var scope;
		
		// if there is only one find, we pass it to the importmanager
		// so we can treat cases like these:
		// import جيزن from ئساسية
		// it will look for جيزن in path ئساسية/جيزن.جني
		// since it will not find neither ئساسية.جني nor ئساسية/ئساسية.جني
		if (importSpecifier.find.length == 1) {
			scope = ImportManager.addImport($$[$0], context.filePath, importSpecifier.find);
		} else {
			scope = ImportManager.addImport($$[$0], context.filePath);
		}
		
		if (importSpecifier.find == 'all') {
			var mySymb;
			if (!scope) { // string import
				ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add, 'مجهول');
			} else {
				var name = importSpecifier.add;
				if (name == '??') { // like in import * from foo => without specifing add name
					name = scope.getImportName();
					name = name.replaceAll('/', '');
					name = name.replace('.mjs', '');
					if (name.includes('.')) {
						var splitted = name.split('.');
						name = splitted[splitted.length - 1];
					}
				}
				importSpecifier.add = name;
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add);
				scope.copyToSymbol(mySymb);
			}
		} else {
			if (!scope) { // string import
				ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
				importSpecifier.add.forEach((add) => {
					yy.symbolScopes.declareSymbol(add, 'مجهول');
				});
			} else {
				var i = 0;
				importSpecifier.find.forEach((find) => {
					var symb = scope.getSymbolByName(find);
					if (!symb) {
						ErrorManager.error("الئسم " + find + " غير معروف في الوحدة '" + $$[$0] + "'");
					}
					// TODO REVIEW symb.name = sym.add
					var mySymb = symb.duplicate();
					mySymb.name = importSpecifier.add[i];
					mySymb.isImport = true;
					yy.symbolScopes.addSymbol(mySymb);
					i++;
				});
			}
		}
		
		if ($$[$0-2].value.includes('??')) {
			// like in import * from foo => without specifing add name
			$$[$0-2].value = $$[$0-2].value.replace('??', importSpecifier.add);
		}
		
		var exp = $$[$0-2].value;
		if (exp.includes('* as ')) {
			exp = '{' + exp.replace('* as ', '') + '}';
		} else if (exp.includes(' as ')) {
			var tmp = exp.split (' as ');
			exp = '{' + tmp[1];
		}
		if (!scope) { // this is a string import
			var imp = $$[$0].replace(/\"/g, '').replace(/\'/g, ''); // remove " and '
			if (imp == '//') {
				// nonfunctional import just for the parser
				this.$ = "";
			} else if ( !imp.startsWith('//') && imp.startsWith('/') ) {
				// local file import
				if (imp.endsWith('.js') || imp.endsWith('.mjs')) {
					// we add ./ the dot to always go from current script path
					this.$ = 'import ' + $$[$0-2].value + ' from ".' + imp + '";'
				}else {
					// nonfunctional import, just for file copy
					this.$ = "";
				}
			} else {
				this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";' //export ' + exp; 
			}
		} else {
			var imp = '.' + scope.getImportName();
			//if (scope.getSourceFile() && (!$$[$0].endsWith(scope.getSourceFile()))) {
			//	imp = './' + $$[$0] + '.' + scope.getSourceFile() + '.mjs';
			//}
			this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";'// + '; export ' + exp;
		}
	
break;
case 31:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		var importNames = $$[$0].split(', ');
		var result = '';
		importNames.forEach (impName => {
			var scope = ImportManager.addImport(impName, context.filePath);
			var symb = scope.getSymbolByName(impName);
			if (!symb) {
				ErrorManager.error("الئسم " + impName + " غير معروف في الوحدة '" + impName + "'");
			}
			// TODO REVIEW symb.name = sym.add
			symb.isImport = true;
			yy.symbolScopes.addSymbol(symb);
			var imp = '.' + scope.getImportName();
			var exp = impName;
			var sep = result == '' ? '' : ';';
			result += sep + 'import {' + impName + '} from "' + imp + '";'// + '; export {' + exp + '}';
		});
		this.$ = result;
	
break;
case 32:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: $$[$0].split(', '),
			add: $$[$0].split(', '),
			value: '{' + $$[$0] + '}'
		}			
	
break;
case 33:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: [$$[$0-2]],
			add: [$$[$0]],
			value: '{' + $$[$0-2].replace('مفترض', 'default') + ' as ' + $$[$0] + '}'
		}
	
break;
case 34:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: 'all',
			add: '??',
			value: '* as ??' 
		}
	
break;
case 35:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: "all",
			add: $$[$0],
			value: '* as ' + $$[$0]
		}
	
break;
case 37:

		this.$ = $$[$0-2] + ', ' + $$[$0]
	
break;
case 39:

		this.$ = $$[$0-2] + '.' + $$[$0]
	
break;
case 41:

		var s = $$[$0].replaceAll('"', '').replaceAll("'", "");
		ImportManager.dependencies.push(s);
		this.$ = '';
	
break;
case 42:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb;
		if ($$[$0].isComposite) {
			mySymb = yy.symbolScopes.declareCompositeSymbol(
				{isArray: $$[$0].isArray},
				$$[$0].symbols,
				$$[$0-2]
			);
		} else {
			mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
			yy.symbolScopes.declareSymbolS(mySymb);
		}
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = null';
	
break;
case 43:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var mySymb;
		if ($$[$0-2].isComposite) {
			mySymb = yy.symbolScopes.declareCompositeSymbol(
				{isArray: $$[$0-2].isArray},
				$$[$0-2].symbols,
				$$[$0-4]
			);
		} else {
			mySymb = yy.symbolScopes.createSymbolS($$[$0-4], $$[$0-2].symb, $$[$0-2].isArray, $$[$0-2].subTypeSymbol);
			yy.symbolScopes.declareSymbolS(mySymb);
		}	
		$$[$0].symb.canBeAssignedTo(mySymb)
		this.$ = ($$[$0-4].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-4] + ' = ' + $$[$0].value;
	
break;
case 44:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb.typeSymbol, $$[$0].symb.isArray, $$[$0].symb.subTypeSymbol);
		yy.symbolScopes.declareSymbolS(mySymb);
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 45:

		var funcSymb = yy.funcStack.pop(); // exit struct scope
		yy.symbolScopes.exit();
		this.$ = 'export const ' + $$[$0-1] + ' = {}'; // no output
	
break;
case 46:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isStruct = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
		this.$ = $$[$0];
	
break;
case 47:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current struct symbol
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of {symb, init, value}
		symbols.forEach((elem) => {
			if (elem.isSpread) {
				funcSymb.hasUnknownComposite = true;
			} else {
				funcSymb.addMember(elem.symb);
			}
		});
	
break;
case 48:

		var funcSymb = yy.funcStack.pop(); // exit enum scope
		yy.symbolScopes.exit();
		this.$ = ''; // no output
	
break;
case 49:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isEnum = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
	
break;
case 50:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current enum symbol
		var enums = $$[$0-1]; // $$[$0-1] enum_list is an array of {symb, value}
		funcSymb.allowed = $$[$0-1];
	
break;
case 51:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.funcStack.pop();
		
		if (body_block.includes('this.')) {
			// we used this keyword, so self is a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb;
		}
		
		var extendStr = '';
		if (funcSymb.hasParent()) {
			extendStr = ' extends ' + funcSymb.mySuper;
		}
		
		if (!selfSymb.isClass && !function_ret.symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة '" + funcSymb.toString() + "'");
		}
		
		if (function_decl.funcname == 'مدخل') { // self exec main function
			this.$ = '(async function ' + function_decl.funcname + function_decl.params + body_block + ')()'; 
		} else if (funcSymb.isShortcut()) { // this is a shortcut
			this.$ = function_decl.exportStr + 'const ' + function_decl.funcname + '=' + funcSymb.myShortcut + ';'
				/* + function_decl.funcname + '.prototype || (' + function_decl.funcname + '.prototype = {});' */
				+ body_block.slice(1,-1); // remove first and last { }
		} else if (selfSymb.isClass) { // this is a class
			// we should not have a return
			if (funcSymb.typeIsNot(funcSymb.name)) {
				ErrorManager.error("لا يجب تحديد نوع ئرجاع لصنف <" + funcSymb.getTypeName() + ">");
			}
			this.$ = function_decl.exportStr + 'class ' + function_decl.funcname + extendStr + '{constructor' + function_decl.params + body_block + '}';
		} else { // this is a function
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.exportStr + asyncStr + 'function ' + function_decl.funcname + function_decl.params + body_block;
		}
	
break;
case 52:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var funcSymb = yy.funcStack.pop();
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		
		// subfunction, means self is a class
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb;
		
		// dealing with setters and getters (DISABLED FOR NOW)
		/*
		var setterCode = '';
		var getterCode = '';
		if (function_decl.funcname.startsWith('رد')) {
			// getter function
			getterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{get: function() {return this.${function_decl.funcname}();},configurable:true});`;
		}
		if (function_decl.funcname.startsWith('خد')) {
			// setter function
			setterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{set: function (value) {this.${function_decl.funcname}(value);},configurable:true});`;
		}
		*/
		
		if (funcSymb.isShortcut()) {
			var result = function_decl.objname + '.prototype != null && (' + function_decl.objname + '.prototype.' + function_decl.funcname + '=' + function_decl.objname + '.prototype.' + funcSymb.myShortcut + ');';
			result += function_decl.objname + '.' + function_decl.funcname + '=' + function_decl.objname + '.' + funcSymb.myShortcut + ';';
			this.$ = result;
		} else {
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.objname + '.prototype.' + function_decl.funcname + '=' /*+ function_decl.objname + '.' + function_decl.funcname + '='*/ + asyncStr + 'function' + function_decl.value + body_block;
		}
	
break;
case 53:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];

		if ($$[$0].isComposite) {
			yy.symbolScopes.makeCompositeSymbol(funcSymb, $$[$0].isArray, $$[$0].symbols);
		} else {
			funcSymb.typeSymbol = $$[$0].symb;
			funcSymb.isArray = $$[$0].isArray;
			funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		}
		
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 54:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.isAwait = true;
		
		if ($$[$0].isComposite) {
			yy.symbolScopes.makeCompositeSymbol(funcSymb, $$[$0].isArray, $$[$0].symbols);
		} else {
			funcSymb.typeSymbol = $$[$0].symb;
			funcSymb.isArray = $$[$0].isArray;
			funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		}
		
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 55:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.isAwait = true;
		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 56:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 57:

		this.$ = {
			funcname: $$[$0-1].funcname,
			exportStr: $$[$0-1].isExport ? 'export ' : '',
			params: $$[$0]
		}
	
break;
case 58:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ErrorManager.setFunc($$[$0]);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], 'فارغ');
		
		yy.selfStack.push(mySymb);
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();	
		
		this.$ = {
			funcname: $$[$0],
			isExport: !$$[$0].startsWith('_'),
		}
	
break;
case 59:

		this.$ = '(' + $$[$0-1] + ')';
	
break;
case 60:

		this.$ = {
			funcname: $$[$0-1].funcname,
			objname: $$[$0-1].objname,
			value: $$[$0]
		}
	
break;
case 61:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.setFunc($$[$0-2] + '.' + $$[$0]);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		yy.selfStack.push(mySymb);
		yy.symbolScopes.enter();
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0], 'فارغ');
		mySymb.addMember(mySymb2);
		yy.funcStack.push(mySymb2);
		this.$ = {
			funcname: $$[$0],
			objname: $$[$0-2]
			//value: $$[$0-2] + '.prototype.' + $$[$0] + '=' + $$[$0-2] + '.' + $$[$0] + '=' + async + 'function'
		}
	
break;
case 63:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = $$[$0];
	
break;
case 64:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = $$[$0-2] + ',' + $$[$0];
	
break;
case 65:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.args.push({
			symb: $$[$0].symb,
			init: $$[$0].init
		});
		this.$ = $$[$0].value;
	
break;
case 66:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'دالة', false, $$[$0].symb.name);
		funcSymb.args.push({
			symb: symb,
			init: $$[$0-3]
		});
		this.$ = $$[$0-4];
	
break;
case 67:

		/* empty */
		this.$ = false;
	
break;
case 68:

		this.$ = true;
	
break;
case 69: case 70:

		this.$ = "";
	
break;
case 71: case 72:

		//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = "";
	
break;
case 73:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exit();
		var result = $$[$0-1].filter(Boolean).join(';');
		
		//we set proper 'this' name in every start of a block
		//if block contains super, then it should come after it
		if (!result.includes('super(')) {
			result = 'const هدا=this;' + result;
		}
		/*
		if (result.includes('super()')) {
			result = result.replace('super();', 'super();const هدا=this;');
		} else {
			result = 'const هدا=this;' + result;
		}
		*/
		this.$ = '{' + result + '}';
	
break;
case 74:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{}';
	
break;
case 75:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var superSymb = yy.symbolScopes.getSymbByName($$[$0-3]);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.mySuper = $$[$0-3];
		
		// check args
		var paramValues = superSymb.checkArgs($$[$0-1]);

		// copy super members to self members
		// superSymb.copyMembersTo(selfSymb);
		selfSymb.superSymbol = superSymb;
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb; // change type to itself

		// if this class already shortcuts, then don't call super()
		if (selfSymb.isShortcut()) {
			this.$ = '';
		} else {
			this.$ = 'super(' + paramValues.join(', ') + ')';
		}
    
break;
case 76:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.myShortcut = $$[$0];
		if (selfSymb.name == funcSymb.name) { // we are in a class
			selfSymb.myShortcut = $$[$0];
			var superSymb = yy.symbolScopes.getSymbByName($$[$0]);
			// TODO: for now we grant that when a func shortcuts then its a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb; // change type to itself
			// if already have members, this means we used a has or extends before shortcuts > error
			if (selfSymb.members.length) {
				ErrorManager.error('يجب ئن تكون صيغة يختصر كئول سطر في المجموعة');
			}
			// copy origi members to self members if we are in a class
			superSymb.copyMembersTo(selfSymb);
		} else { // we are in a subfunction
			if (!selfSymb.isShortcut()) {
				// parent not shortcuting
				selfSymb.checkMember($$[$0]);
			} else {
				// parent have a shortcut
				var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
				superSymb.checkMember($$[$0]);
			}
		}
	
break;
case 77:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.isClass = true; // has keyword makes this a class
		selfSymb.typeSymbol = selfSymb; // change type to itself
		
		var thisStr = 'this';
		if (selfSymb.isShortcut()) {
			thisStr = selfSymb.name + '.prototype';
		}
		var result = ''; // will contain setter, getter output for the property
		
		// $$[$0] has_list is an array of {symb, value, init}
		var symbols = $$[$0];
		symbols.forEach((elem) => {
			var symb = elem.symb;
			selfSymb.addMember(symb);
			if (symb.isShortcut()) {
				// declare setters & getters
				var name = symb.myShortcut;
				var getterCode = `return this.${name}`;
				var setterCode = `this.${name} = value;`;
				result += `Object.defineProperty(${selfSymb.name}.prototype || ${selfSymb.name}, '${symb.name}', {get: function() {${getterCode}}, set: function(value) {${setterCode}} });`;
			} else {
				if (elem.init) {
					result += 'this.' + elem.value + ';';
				} else {
					result += 'this.' + symb.name + ' = null;';
				}
			}
		});
		this.$ = result;
	
break;
case 78:
 
		this.$ = []; 
	
break;
case 79: case 82: case 95: case 96: case 97:

		this.$ = $$[$0];
	
break;
case 80:

		this.$ = [$$[$0]];
	
break;
case 81:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	
break;
case 83:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		$$[$0-2].symb.myShortcut = $$[$0].value;
		if ($$[$0].value.startsWith('هدا') || $$[$0].value.startsWith('this')) {
			ErrorManager.error("لا تقم بئدراج 'هدا' في يختصر، لئنها مفترضة");
		}
		this.$ = $$[$0-2];
	
break;
case 84:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		if (!selfSymb.isShortcut()) {
			// parent not shortcuting
			selfSymb.checkMember($$[$0]);
		} else {
			// parent have a shortcut
			var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
			superSymb.checkMember($$[$0]);
		}
		$$[$0-2].symb.myShortcut = $$[$0];
		this.$ = $$[$0-2];
	
break;
case 85:
 // this is for composits (structs)
		this.$ = {
			isSpread: true
		}
	
break;
case 86:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			init: $$[$0].init
		}
	
break;
case 87:

		var paramSymb = $$[$0-1].symb;
		var initSymb = $$[$0].symb;
		if (!initSymb.canBeAssignedTo(paramSymb)) {
			ErrorManager.error("محاولة ئسناد " + initSymb.toString() + " ئلا " + paramSymb.toTypeString());
		}
		this.$ = {
			symb: paramSymb,
			value: $$[$0-1].value + '=' + $$[$0].value,
			init: true
		}
	
break;
case 88:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'منوع'),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 89:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], $$[$0-2]),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 90:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'مصفوفة', true /*isArray*/, $$[$0-4]/*subtype*/),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 91:
 // legacy
		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-1];
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 92:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-1], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-3];
		this.$ = {
			symb: symb,
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 93:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		yy.symbolScopes.exitAndClear(); // scope opened by composite_header
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-5], $$[$0-3], $$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-1] + ' = {}',
			init: true
		}
	
break;
case 94:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exitAndClear(); // scope opened by composite_header
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-2], null, $$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-1] + ' = {}',
			init: true
		}
	
break;
case 98:

		this.$ = [$$[$0].replaceAll('"', '').replaceAll("'", '')];
	
break;
case 99:

		$$[$0-2].push($$[$0].replaceAll('"', '').replaceAll("'", ''));
		this.$ = $$[$0-2];
	
break;
case 100:

		this.$ = [$$[$0]]
	
break;
case 101:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2]
	
break;
case 102:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// دع ب
		yy.symbolScopes.declareSymbol($$[$0], 'منوع');
        this.$ = 'let ' + $$[$0]; 
    
break;
case 103:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// دع ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], 'منوع', $$[$0].symb.isArray);
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// mySymb is generic (munawaa) add struct memebers to it
			mySymb.members = $$[$0].symb.members;
		}
        this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
    
break;
case 104:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// عدد ب
		yy.symbolScopes.declareSymbol($$[$0], $$[$0-1]);
		this.$ = 'let ' + $$[$0];
	
break;
case 105:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد[] ب
		symb: yy.symbolScopes.declareSymbol($$[$0], 'مصفوفة', true /*isArray*/, $$[$0-3]/*subtype*/);
		//yy.symbolScopes.declareSymbol($$[$0], $$[$0-3], true);
		this.$ = 'let ' + $$[$0] + ' = []';
	
break;
case 106:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-3]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد '" + $$[$0].symb.toString() + "' ئلا '" + $$[$0-3] + "'");
		}
		
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 107:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		// عدد ب = 4
		var symb = yy.symbolScopes.declareSymbol($$[$0-2], 'مصفوفة', true /*isArray*/, $$[$0-5]/*subtype*/);
		
		if (!$$[$0].symb.canBeAssignedTo(symb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + symb.toString());
		}
		//yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-5], true);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 108:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-4], $$[$0-2], $$[$0]);
		this.$ = 'let ' + $$[$0] + ' = ' + ($$[$0-4].isArray ? '[]' : '{}');
	
break;
case 109:

		ErrorManager.setContext(_$[$0-6], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-6], $$[$0-4], $$[$0-2]);
		$$[$0].symb.canBeAssignedTo(symb);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 110:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-1], null, $$[$0]);
		this.$ = 'let ' + $$[$0] + ' = ' + ($$[$0-1].isArray ? '[]' : '{}');
	
break;
case 111:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-3], null, $$[$0-2]);
		$$[$0].symb.canBeAssignedTo(symb);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 112:

		yy.symbolScopes.enter();
		this.$ = {
			isArray: false
		}
	
break;
case 113:

		yy.symbolScopes.enter();
		this.$ = {
			isArray: true
		}
	
break;
case 114:

        //this.$ = $$[$0-1] + '(' + $$[$0].value + ')';
		this.$ = 'console.log(' + $$[$0].value + ')';
    
break;
case 115:

		this.$ = 'delete ' + $$[$0].value;
	
break;
case 116:

		this.$ = {
			symb: yy.symbolScopes.createSymbol('', 'نصية'),
			value: $$[$0].getTypeName()
		}
	
break;
case 117:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIs('فارغ')) {
			ErrorManager.warning("ئستخدام ئرجاع في وضيفة فارغة، سيتم التحويل ئلا منوع");
			// convert function return type to منوع
			funcSymb.typeSymbol = Symbol.SYSTEMTYPES['منوع'];
		}
		
		if (!$$[$0].symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع " + $$[$0].symb.toString() + " غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!funcSymb.typeSymbol.isStruct) {
				// funcSymb is generic add struct memebers to it
				funcSymb.members = $$[$0].symb.members;
			}
		}
		this.$ = 'return ' + $$[$0].value; 
	
break;
case 118:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIsNot('فارغ')) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		this.$ = 'return'; 
	
break;
case 119: case 121:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 120:
 
		yy.symbolScopes.enter();
		this.$ = 'while (' + $$[$0].value + ')';
	
break;
case 122:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.enter();
		if (!$$[$0].symb.isIterable()) {
			ErrorManager.error("محاولة ئستطواف نوع غير مستطوف " + $$[$0].symb.toString());
		}
		// except unknown types, we can't apply FOR to a type without subTypeSymbol
		var subTypeSymbol = $$[$0].symb.subTypeSymbol;
		if ($$[$0].symb.typeIs('مجهول')) {
			subTypeSymbol = $$[$0].symb.typeSymbol; // مجهول
		}
		if (!subTypeSymbol) {
			console.log(subTypeSymbol);
			ErrorManager.error("محاولة ئستطواف نوع غير مستطوف " + $$[$0].symb.toString());
			throw new Error("FOR IN without subTypeSymbol " + $$[$0].symb);
		}		
		var smb = yy.symbolScopes.declareSymbol($$[$0-2], subTypeSymbol.name);
		smb.isReadOnly = true;
		// TOREVIEW
		//if ($$[$0].type == 'مصفوفة') {
			this.$ = 'for (var ' + $$[$0-2] + ' of ' + $$[$0].value + ')';
		//} else {
			//this.$ = 'for (var ' + $$[$0-2] + ' in ' + $$[$0].value + ')';
		//}
	
break;
case 123:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 124: case 125:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 126:

		this.$ = $$[$0-2] + $$[$0-1];
	
break;
case 127:

		yy.symbolScopes.enter();
		this.$ = 'if (' + $$[$0].value + ')';
	
break;
case 128: case 132:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 129:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 130:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.enter();
		this.$ = 'else if (' + $$[$0].value + ')';
	
break;
case 131:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0].filter(Boolean).join(';') + '}';
	
break;
case 133:

		yy.symbolScopes.enter();
		this.$ = 'else';
	
break;
case 134:

		this.$ = 'try ' + $$[$0-2] + 'catch (فشل) ' + $$[$0];
	
break;
case 135: case 136:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.enter();
	
break;
case 137:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		// imported symbols can't be directly changed
		if (mySymb.isImport) {
			ErrorManager.error("يتعدر تغيير قيمة متغير الئيراد " + mySymb.toString());
		}
		// read only symbols can't be assigned
		if (mySymb.isReadOnly) {
			ErrorManager.error("يتعدر تغيير قيمة متغير للقرائة فقط " + mySymb.toString());
		}
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		this.$ = {
			symb: mySymb,
			value: $$[$0-2] + '=' + $$[$0].value
		}
	
break;
case 138:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		if ($$[$0-2].symb) {
			var mySymb = $$[$0-2].symb;
			if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
				ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + $$[$0-2].symb.toString());
			}
			if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
				// expression is an object literal
				if (!mySymb.typeSymbol.isStruct) {
					// mySymb is generic add struct memebers to it
					mySymb.members = $$[$0].symb.members;
				}
			}
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 139:

		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("محاولة ئدراج " + $$[$0].symb.toString() + " ضمن '" + $$[$0-2].symb.name + "[]'");
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 140:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' + ' + $$[$0].value 
		}
	
break;
case 141:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' - ' + $$[$0].value 
		}
	
break;
case 142:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' * ' + $$[$0].value 
		}
	
break;
case 143:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' / ' + $$[$0].value 
		}
	
break;
case 144:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' == ' + $$[$0].value 
		}
	
break;
case 145:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' != ' + $$[$0].value 
		}
	
break;
case 146:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' < ' + $$[$0].value
		}
	
break;
case 147:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value  + ' <= ' + $$[$0].value
		}
	
break;
case 148:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' > ' + $$[$0].value
		}
	
break;
case 149:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' >= ' + $$[$0].value
		}
	
break;
case 150:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية وو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' && ' + $$[$0].value
		}
	
break;
case 151:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية ئو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' || ' + $$[$0].value
		}
	
break;
case 152:

		var bool1 = $$[$0-4].symb.canBeAssignedTo($$[$0].symb);
		var bool2 = $$[$0].symb.canBeAssignedTo($$[$0-4].symb);
		if (!bool1 && !bool2) {
			ErrorManager.error("ئستخدام نوعين غير متوافقين في عبارة تلاتية " + $$[$0-4].symb.toString() + " و " + $$[$0].symb.toString());
		}
		var symb;
		if (bool1) symb = $$[$0-4].symb;
		if (bool2) symb = $$[$0].symb;
		// for now type checking will be ignored for ternary
        this.$ = {
			symb: symb, //Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0-2].value + ' ? ' + $$[$0-4].value + ' : ' + $$[$0].value
		}
    
break;
case 153:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		// check if class or function
		var newStr = symb.isClass ? 'new ' : '';
		this.$ = {
			symb: symb,
			value: newStr + $$[$0-3] + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 154:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		var parentSymb = symb.memberOf;
		var cond1 = parentSymb && parentSymb.typeIs('مصفوفة');
		var cond2 = $$[$0-3].precedent && $$[$0-3].precedent.isArray;
		// check array homogeneity
		if (cond1 && cond2) {
			symb.checkArrayHomogeny($$[$0-1], $$[$0-3].precedent.subTypeSymbol); //symb is an array function
		}
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-3].value + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 155:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.warning("تجاهل فحص المعطيين لئستدعائ وضيفة من مصفوفة");
		this.$ = {
			symb: $$[$0-3].symb,
			value: $$[$0-3].value + '(' + $$[$0-1].map(item => item.value).join(', ') + ')'
		}
	
break;
case 156:
 this.$ = []; 
break;
case 157:

		this.$ = [{
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		}]
	
break;
case 158:

		$$[$0-2].push({
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		})
		this.$ = $$[$0-2];
	
break;
case 159:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null,
		}
	
break;
case 160:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null
		}
	
break;
case 161: case 162:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0-2]
		}
	
break;
case 163:

		yy.symbolScopes.exit();
		yy.funcStack.pop();
		var symb = $$[$0-3].symb;
		symb.subTypeSymbol = $$[$0].symb.typeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + "=> (" + $$[$0].value + ")"
		}
	
break;
case 164:

		yy.symbolScopes.enter();
		var symb = yy.symbolScopes.createSymbol('', 'دالة', false);
		yy.funcStack.push(symb);
		this.$ = {
			symb: symb
		}
	
break;
case 165:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (!funcSymb.isAwait) {
			ErrorManager.error("ئستخدام ريتما في وضيفة متزامنة " + funcSymb.toString());
		}
		//funcSymb.isAwait = true;
        this.$ = {
			symb: $$[$0].symb,
			value: 'await ' + $$[$0].value
		}
    
break;
case 166:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-2]);
		if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + $$[$0-2] + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);	
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2] + '.' + $$[$0],
			precedent: symb
		}
	
break;
case 167:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = $$[$0-2].symb.typeSymbol;
		if (!symb.isPrimitive() && !symb.isStruct && $$[$0-2].symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: symb
		}; 
	
break;
case 168:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		//var type = $$[$0-2].type;
		var symb = $$[$0-2].symb;
		var memberSymb;
		if (symb.typeIs('نوعبنية') || symb.typeIs('نوعمركب')) {
			// for object literals, we take symb name as member base
			memberSymb = symb.checkMember($$[$0]);
		} else {
			// for other variables, we take their symbtype as member base
			var typeSymb = symb.typeSymbol;
			if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
				// calling a property without instance
				ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
			}
			memberSymb = typeSymb.checkMember($$[$0]);
		}
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: symb
		};
	
break;
case 169:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: $$[$0-2].symb
		};
	
break;
case 170:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var symb = selfSymb.checkMember($$[$0]);
		this.$ = {
			symb: symb,
			value: 'this.' + $$[$0],
			precedent: selfSymb
		}
	
break;
case 171:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var symb = $$[$0-3].symb.typeSymbol.checkMember($$[$0]);
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-3].value + ').' + $$[$0],
			precedent: $$[$0-3].symb
		}
	
break;
case 172:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			symb: symb.isArray ? symb.subTypeSymbol : unknownType,
			value: $$[$0-3] + '[' + $$[$0-1].value + ']'
		}
	
break;
case 173:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: 'this[' + $$[$0-1].value + ']'
		}
	
break;
case 174:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			// type: symb.subtype, // || 'مجهول'
			//yy.symbolScopes.getSymbByName(symb.subType),
			symb: symb.isArray ? symb.subTypeSymbol : unknownType, 
			value: $$[$0-3].value + '[' + $$[$0-1].value + ']'
		}
	
break;
case 175:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symbs = $$[$0-1].symb; // these are symbols of object properties
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعمركب'));
		symb.isLiteral = true;
		symbs.forEach((sy) => {
			if (sy.isSpread) {
				sy.members.forEach((memb) => {
					symb.addMember(memb);
				});
			} else {
				symb.addMember(sy);
			}
		});
		
		this.$ = {
			symb: symb,
			value: '{' + $$[$0-1].value + '}'
		}
	
break;
case 176:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعمركب'));
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: '{}'
		}
	
break;
case 177:
 
		this.$ = {
			symb: [$$[$0].symb],
			value: $$[$0].value 
		}
	
break;
case 178:

		this.$ = {
			symb: $$[$0-2].symb.concat($$[$0].symb),
			value: $$[$0-2].value + ', ' + $$[$0].value
		}
	
break;
case 179: case 180:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.createSymbol($$[$0-2]);
		symb.typeSymbol = $$[$0].symb.typeSymbol;
		symb.isArray = $$[$0].symb.isArray;
		symb.subTypeSymbol = $$[$0].symb.subTypeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 181:

		ErrorManager.setContext(_$[$0], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		var mySymb = yy.symbolScopes.createSymbol($$[$0]);
		mySymb.typeSymbol = symb.typeSymbol;
		mySymb.isArray = symb.isArray;
		mySymb.subTypeSymbol = symb.subTypeSymbol;
		this.$ = {
			symb: mySymb,
			value: $$[$0]
		}
	
break;
case 182:

		var symb = $$[$0].symb.duplicate();
		symb.isSpread = true;
		this.$ = {
			symb: symb,
			value: '...' + $$[$0].value
		}
	
break;
case 183:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منوع'),
			value: []
		}
		//ErrorManager.error("حدد نوع المصفوفة");
		//this.$ = "";
	
break;
case 184:

        this.$ = {
			symb: $$[$0].symb,
			value: [ $$[$0].value ]
		}
    
break;
case 185:

		ErrorManager.setContext(_$[$0-2], context.filePath);
        $$[$0-2].value.push($$[$0].value);
		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("نوعين غير متجانسين في المصفوفة");
		}
        this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value
		}
    
break;
case 186:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			subTypeSymbol: null,
			isArray: false
		}
	
break;
case 187:

		var symb = yy.symbolScopes.getSymbByName('مصفوفة');
		var subTypeSymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		this.$ = {
			symb: symb,
			subTypeSymbol: subTypeSymb,
			isArray: true,
		}
	
break;
case 188:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb, subTypeSymb;
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of {symb, value, init}
		if ($$[$0-3].isArray) {
			symb = yy.symbolScopes.getSymbByName('مصفوفة');
			subTypeSymb = yy.symbolScopes.getSymbByName('نوعمركب');
		} else {
			symb = yy.symbolScopes.getSymbByName('نوعمركب');
			subTypeSymb = null;
		}	
		this.$ = {
			symb: symb,
			symbols: symbols,
			subTypeSymbol: subTypeSymb,
			isArray: subTypeSymb != null,
			isComposite: true
		}
	
break;
case 189:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb, subTypeSymb;
		if ($$[$0].isArray) {
			symb = yy.symbolScopes.getSymbByName('مصفوفة');
			subTypeSymb = yy.symbolScopes.getSymbByName('نوعمركب');
		} else {
			symb = yy.symbolScopes.getSymbByName('نوعمركب');
			subTypeSymb = null;
		}	
		this.$ = {
			symb: symb,
			symbols: [{isSpread: true}],
			subTypeSymbol: subTypeSymb,
			isArray: subTypeSymb != null,
			isComposite: true
		}
	
break;
case 190:

		this.$ = '...' + $$[$0].value;
	
break;
case 191:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: '!' + $$[$0].value
		}
	
break;
case 192:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' in ' + $$[$0].value
		}
	
break;
case 193:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = $$[$0].symb;	//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = {
			symb: symb,
			isArray: $$[$0].isArray,
			subTypeSymbol: $$[$0].subTypeSymbol
		}
	
break;
case 194:

		this.$ = {
			symb: $$[$0-1].symb,
			value: '(' + $$[$0-1].value + ')'
		};
	
break;
case 195: case 196: case 202:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 197:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 198:
 
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 199:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value 
		}; 
	
break;
case 200:

		// function_call
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		};
	
break;
case 201:

		// could've done this.$=$$[$0] but that's confusing
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 203:

		// member_access
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 204:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value
		} 
	
break;
case 205:

		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 206:

		this.$ = {
			symb: $$[$0-1].symb, 
			value: $$[$0-1].value
		}
	
break;
case 207:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}; 
	
break;
case 208:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0]
		}
	
break;
case 209:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var elemTypeSymb = $$[$0-1].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, elemTypeSymb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-1].value.join(', ') + ']'
		}
	
break;
case 210:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var elemTypeSymb = $$[$0-2].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, $$[$0].symb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-2].value.join(', ') + ']'
		}
	
break;
case 211:

		this.$ = { 
			symb: $$[$0].symb, // منطق 
			value: $$[$0].value 
		}; 
	
break;
case 212:

		this.$ = {
			symb: $$[$0].symb,
			value: '(' + $$[$0].value + ')'
		};
	
break;
case 213:

		var symb = $$[$0-2].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-2].value + ')'
		}
	
break;
case 214:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0].value
		}
	
break;
case 215:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			value: $$[$0]
		}; 
	
break;
case 216:

		var symb = yy.symbolScopes.getSymbByName($$[$0-1]);
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: $$[$0-1]
		}; 
	
break;
case 217:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('عدد'),
			value: toEnDigit($$[$0])
		}
	
break;
case 218:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'), 
			value: 'true'
		}; 
	
break;
case 219:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: 'false'
		}; 
	
break;
case 220:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['عدم'],
			value: 'null'
		}; 
	
break;
case 221:

		ErrorManager.setContext(_$[$0], context.filePath);
		//inlineParse($$[$01].replace('<x-', '<'), context, yy)
		// we still support templates like _{} for compatibility
		const regex = /[_%]{(.*?)}/g;
		var match;
		
		var origins = [];
		var replace = [];
		while ((match = regex.exec($$[$0])) !== null) {
			let s = match[1];
			if (s != '') {
				var mys = s.replaceAll('\\(', '(').replaceAll('\\)', ')');
				var res = inlineParse(mys, context, yy);
				origins.push(mys);
				replace.push(res);
			}
		}
		
		var result = $$[$0];
		
		var val = $$[$0].replaceAll('"', '').replaceAll("'", "");
		var symb = yy.symbolScopes.createSymbol(val, 'نصية');
		
		for (var i=0; i<origins.length; i++) {
			result = result.replace(origins[i], replace[i]);
		}
		result = result.replaceAll('"', '`').replaceAll('_{', '${').replaceAll('%{', '${').replaceAll('هدا.', 'this.')
		
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: result,
			val: val // string value without delimiters
		}
	
break;
case 222:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.selfStack[yy.selfStack.length-1],
			value: 'this'
		}			
	
break;
case 223:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = yy.selfStack[yy.selfStack.length-1];
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: 'this'
		}; 
	
break;
case 224:

		ErrorManager.setContext(_$[$0], context.filePath);
		var result = $$[$0].slice(1, -1) // تعويض القوسين بعلامات ئقتباس
					.replaceAll('\t','') // حدف الفراغين
					.replace(/(\r\n|\n|\r)/gm,''); // حدف رجعات السطر
					//.replaceAll('{', '${'); // تعويض متغيرين القالب
					
		// we still support templates like _{} for compatibility
		var regexx = /[_%]{(.*?)}/g;
		var match;
		
		var origins = [];
		var replace = [];
		while ((match = regexx.exec(result)) !== null) {
			let s = match[1];
			if (s != '') {
				var mys = s.replaceAll('\\(', '(').replaceAll('\\)', ')');
				var res = inlineParse(mys, context, yy);
				origins.push(mys);
				replace.push(res);
			}
		}
		
		result = processJNX(result, context, yy);
		
		for (var i=0; i<origins.length; i++) {
			result = result.replace(origins[i], replace[i]);
		}	
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('نصية'),
			value: result
		}
	
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:$V0,12:9,13:10,14:11,15:12,31:$V1,36:$V2,41:$V3,42:$V4,43:$V5,56:15,59:16,61:41,63:$V6,66:42,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{1:[3]},{5:[1,47],6:48,7:5,9:6,10:7,11:$V0,12:9,13:10,14:11,15:12,31:$V1,36:$V2,41:$V3,42:$V4,43:$V5,56:15,59:16,61:41,63:$V6,66:42,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{1:[2,2]},o($Vi,[2,3]),{8:49,30:$Vj},{8:51,30:$Vj},o($Vi,[2,7]),{8:52,30:$Vj},{8:53,30:$Vj},o($Vi,[2,10]),o($Vi,[2,11]),{8:54,30:$Vj,101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{32:69,35:70,36:[1,71],38:[1,72]},{41:[1,73]},{37:$Vy,49:$Vz,57:74},{37:$Vy,49:$Vz,57:76},{36:[1,77],46:79,48:[1,81],52:78,54:[1,80]},o($VA,[2,195]),o($VA,[2,196]),o($VA,[2,197]),o($VA,[2,198]),o($VA,[2,199],{146:82,37:$VB,40:$VC}),o($VA,[2,201]),o($VA,$VD,{146:85,37:$VB,40:$VE,63:$VF,84:$VG}),o($VA,$VH,{146:89,37:$VB,40:$VI,63:$VJ}),{15:93,36:$V2,41:$V3,63:$V6,69:$VK,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,133:92,134:94,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VA,[2,207]),o($VA,[2,208]),o($VL,[2,183],{127:18,115:19,120:20,130:21,131:22,135:23,81:24,114:25,138:27,142:28,143:30,147:31,145:32,141:96,15:97,36:$V2,41:$V3,63:$V6,82:$V7,84:$V8,87:$V9,136:$Va,137:$Vb,144:$Vc,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh}),o($VA,[2,211]),o($VA,[2,212]),o($VA,[2,214]),o($VA,$VM,{146:98,37:$VB,40:$VN,63:$VO,84:$VP}),o($VA,[2,217]),o($VA,[2,218]),o($VA,[2,219]),o($VA,[2,220]),o($VA,[2,221]),o($VA,[2,222],{146:102,37:$VB,40:$VQ,84:$VR}),o($VA,[2,224]),{62:105,63:$VS},{62:107,63:$VS},{15:108,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{36:$VT,41:$VU,82:$VV,88:[1,110],139:109,140:111},{15:115,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:116,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{1:[2,1]},o($Vi,[2,4]),o($Vi,[2,5]),o($VW,[2,29]),o($Vi,[2,6]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,12]),{15:117,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:118,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:119,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:120,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:121,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:122,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:123,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:124,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:125,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:126,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:127,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:128,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:129,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:130,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{33:[1,131]},{30:[2,31],33:[2,32],39:[1,132]},o($VX,[2,36],{37:[1,133]}),{33:[2,34],37:[1,134]},{30:[2,41]},{49:$VY,58:135},{36:$VZ,44:137,48:$V_,60:[1,138],86:140},{49:$VY,58:142},{37:[1,143],40:[1,145],45:[1,144],63:[2,58]},{49:[1,147],53:146},{47:148,49:[1,149]},{36:[1,150]},{36:[1,151]},o($VA,[2,200]),{36:[1,152]},{36:$VZ,44:153,48:$V_,86:140},o($VA,[2,203]),o($V$,$V01,{127:18,115:19,120:20,130:21,131:22,135:23,81:24,114:25,138:27,142:28,143:30,147:31,145:32,134:94,75:154,132:155,15:156,133:157,36:$V11,41:$V3,63:$V6,69:$VK,82:$V7,84:$V8,87:$V9,136:$Va,137:$Vb,144:$Vc,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh}),{36:[1,159]},{15:160,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VA,[2,205]),o($V$,$V01,{127:18,115:19,120:20,130:21,131:22,135:23,81:24,114:25,138:27,142:28,143:30,147:31,145:32,134:94,132:155,15:156,133:157,75:161,36:$V11,41:$V3,63:$V6,69:$VK,82:$V7,84:$V8,87:$V9,136:$Va,137:$Vb,144:$Vc,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh}),{36:[1,162]},{65:[1,163]},{65:[1,164],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{62:165,63:$VS},{63:[2,164]},{39:[1,167],85:[1,166]},o($VL,[2,184],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($VA,[2,216]),o($V$,$V01,{127:18,115:19,120:20,130:21,131:22,135:23,81:24,114:25,138:27,142:28,143:30,147:31,145:32,134:94,132:155,15:156,133:157,75:168,36:$V11,41:$V3,63:$V6,69:$VK,82:$V7,84:$V8,87:$V9,136:$Va,137:$Vb,144:$Vc,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh}),{36:[1,169]},{15:170,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VA,[2,223]),{36:[1,171]},{15:172,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($V21,[2,57]),o($V$,[2,62],{64:173,67:174,68:175,80:177,86:180,36:$V31,48:$V_,54:$V41,69:$V51}),o($V21,[2,60]),o($V61,[2,165],{106:$Vl}),{39:[1,182],88:[1,181]},o($VA,[2,176]),o($V71,[2,177]),o($V71,[2,181],{49:[1,183]}),{49:[1,184]},{15:185,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o([30,39,49,51,65,85,88,108],[2,190],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V61,[2,191],{106:$Vl}),o([30,39,49,51,65,85,88,108,116,117,118,119,121,122,123,124,125,126,128],[2,150],{101:$Vk,106:$Vl,129:$Vx}),o($V81,[2,151],{101:$Vk,106:$Vl}),o($V91,[2,140],{101:$Vk,106:$Vl,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V91,[2,141],{101:$Vk,106:$Vl,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($Va1,[2,142],{101:$Vk,106:$Vl,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($Va1,[2,143],{101:$Vk,106:$Vl,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($Vb1,[2,144],{101:$Vk,106:$Vl,128:$Vw,129:$Vx}),o($Vb1,[2,145],{101:$Vk,106:$Vl,128:$Vw,129:$Vx}),o($Vb1,[2,146],{101:$Vk,106:$Vl,128:$Vw,129:$Vx}),o($Vb1,[2,147],{101:$Vk,106:$Vl,128:$Vw,129:$Vx}),o($Vb1,[2,148],{101:$Vk,106:$Vl,128:$Vw,129:$Vx}),o($Vb1,[2,149],{101:$Vk,106:$Vl,128:$Vw,129:$Vx}),{101:$Vk,106:$Vl,108:[1,186],116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},o($V81,[2,192],{101:$Vk,106:$Vl}),{34:187,36:[1,188],41:[1,189]},{36:[1,190]},{36:[1,191]},{36:[1,192]},o($Vi,[2,51]),{2:$Vc1,15:208,16:193,17:195,18:196,19:197,20:198,21:199,22:200,23:201,24:202,25:203,26:204,27:205,28:206,29:207,36:$Vd1,41:$V3,48:$V_,51:[1,194],63:$V6,74:$Ve1,76:$Vf1,77:$Vg1,81:223,82:$V7,84:$V8,86:215,87:$V9,91:$Vh1,92:$Vi1,93:$Vj1,96:$Vk1,97:219,98:$Vl1,99:220,100:$Vm1,102:221,106:$Vn1,110:222,112:$Vo1,114:224,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{49:[2,53]},{36:$VZ,44:229,48:$V_,49:[2,55],86:140},o($Vp1,[2,186],{84:[1,230]}),o($Vp1,[2,189],{87:[1,231]}),o($Vq1,[2,112],{84:[1,232]}),o($Vi,[2,52]),{36:$VZ,44:233,48:$V_,86:140},{15:234,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{36:[1,235]},o($Vi,[2,48]),{36:$Vr1,41:$Vs1,55:236,89:237,90:238},o($Vi,[2,45]),{36:$V31,48:$V_,50:241,51:$Vt1,54:$V41,68:244,78:242,79:243,80:245,82:$Vu1,86:180},{49:[2,49]},{49:[2,46]},o($Vv1,[2,167]),o($VA,[2,193]),{39:$Vw1,65:[1,247]},o($V$,[2,157]),o($V$,[2,159],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V$,[2,160]),o([39,65,101,106,116,117,118,119,121,122,123,124,125,126,128,129],$VM,{146:98,37:$VB,40:$VN,49:[1,249],63:$VO,84:$VP}),o($Vv1,[2,168]),{85:[1,250],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{39:$Vw1,65:[1,251]},o($Vv1,[2,169]),o($VA,[2,206]),o($VA,[2,194],{146:252,37:$VB,40:$Vx1}),{49:[1,254]},o($VA,[2,209],{146:255,37:$VB}),{15:256,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{39:$Vw1,65:[1,257]},o($Vv1,[2,166]),{85:[1,258],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},o($Vv1,[2,170]),{85:[1,259],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{39:[1,261],65:[1,260]},o($V$,[2,63]),o($V$,[2,65]),{36:[1,262]},o($V$,$Vy1,{83:263,45:$Vz1}),o($VA1,$VB1,{70:265,36:[1,266],72:$VC1,84:[1,267]}),{36:[1,269],84:[1,270]},{36:[1,272],87:[1,271]},o($VA,[2,175]),{36:$VT,41:$VU,82:$VV,140:273},{15:274,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:275,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($V71,[2,182],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),{15:276,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{30:[2,30],40:[1,277]},o($VD1,[2,38]),o($VD1,[2,40]),o($VX,[2,37]),{33:[2,33]},{33:[2,35]},{2:$Vc1,15:208,17:279,18:196,19:197,20:198,21:199,22:200,23:201,24:202,25:203,26:204,27:205,28:206,29:207,36:$Vd1,41:$V3,48:$V_,51:[1,278],63:$V6,74:$Ve1,76:$Vf1,77:$Vg1,81:223,82:$V7,84:$V8,86:215,87:$V9,91:$Vh1,92:$Vi1,93:$Vj1,96:$Vk1,97:219,98:$Vl1,99:220,100:$Vm1,102:221,106:$Vn1,110:222,112:$Vo1,114:224,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VW,[2,74]),o($VE1,[2,13]),{8:280,30:$Vj},{8:281,30:$Vj},{8:282,30:$Vj},{8:283,30:$Vj},{8:284,30:$Vj},{8:285,30:$Vj},{8:286,30:$Vj},o($VE1,[2,22]),o($VE1,[2,23]),o($VE1,[2,24]),o($VE1,[2,25]),{8:287,30:$Vj},{8:288,30:$Vj,101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},o($VE1,[2,28]),{36:[1,289]},{36:[1,290]},{30:$Vt1,36:$V31,48:$V_,50:291,54:$V41,68:244,78:242,79:243,80:245,82:$Vu1,86:180},{36:[1,292]},o($VF1,$VM,{146:98,36:[1,293],37:$VB,40:$VN,45:[1,295],63:$VO,84:[1,294]}),{36:[1,297],87:[1,296]},{15:298,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:299,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:300,30:[2,118],36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{49:$VY,58:301},{49:$VY,58:302},{49:$VG1,103:303},{49:$VG1,103:305},o($VF1,$VD,{146:85,37:$VB,40:$VE,45:[1,306],63:$VF,84:$VG}),o($VF1,$VH,{146:89,37:$VB,40:$VI,45:[1,307],63:$VJ}),{15:308,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{36:[1,309]},{15:310,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{49:[2,135]},{49:[2,54]},{85:[1,311]},{36:$V31,48:$V_,50:312,54:$V41,68:244,78:242,79:243,80:245,82:$Vu1,86:180,88:$Vt1},{85:[1,313]},{30:[2,42],45:[1,314]},{30:[2,44],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{63:[2,61]},{51:[1,315]},o($VH1,[2,96],{39:[1,316]}),o($VH1,[2,97],{39:[1,317]}),o($VI1,[2,98]),o($VI1,[2,100]),{51:[1,318]},o([30,51,88],[2,79],{39:[1,319]}),o($VJ1,[2,80]),o($VJ1,[2,82]),o($VJ1,$Vy1,{83:263,45:$Vz1,76:[1,320]}),o($VJ1,[2,85]),o($VK1,[2,154]),{15:156,36:$V11,41:$V3,63:$V6,69:$VK,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,132:321,133:157,134:94,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:322,36:$V2,41:$V3,63:$V6,69:$VK,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,133:323,134:94,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VL1,[2,174]),o($VK1,[2,155]),o($VA,[2,213]),{36:[1,324]},{15:325,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VA,[2,210]),o($VL,[2,185],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($VK1,[2,153]),o($VL1,[2,172]),o($VL1,[2,173]),o($V21,[2,59]),{36:$V31,48:$V_,54:$V41,67:326,68:175,69:$V51,80:177,86:180},{63:$VB1,70:327,72:$VC1},o($VM1,[2,87]),{15:328,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VA1,[2,88]),o($VA1,$VB1,{70:329,72:$VC1}),{85:[1,330]},o([30,39,45,51,63,65,76,84,88],[2,68]),{70:331,72:$VC1,84:$VB1},{36:$Vr1,41:$Vs1,55:332,89:237,90:238},{36:$V31,48:$V_,50:333,54:$V41,68:244,78:242,79:243,80:245,82:$Vu1,86:180,88:$Vt1},o($VA1,$VB1,{70:334,72:$VC1}),o($V71,[2,178]),o($V71,[2,179],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V71,[2,180],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V61,[2,152],{106:$Vl}),{36:[1,335]},o($VW,[2,73]),o($VE1,[2,14]),o($VE1,[2,15]),o($VE1,[2,16]),o($VE1,[2,17]),o($VE1,[2,18]),o($VE1,[2,19]),o($VE1,[2,20]),o($VE1,[2,21]),o($VE1,[2,26]),o($VE1,[2,27]),{63:[1,336]},{30:[2,76]},{30:[2,77]},{30:[2,102],45:[1,337]},{30:[2,104],45:[1,338]},{15:170,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,85:[1,339],87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:340,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{36:$V31,48:$V_,50:341,54:$V41,68:244,78:242,79:243,80:245,82:$Vu1,86:180,88:$Vt1},{30:[2,110],45:[1,342]},{30:[2,114],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{30:[2,115],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{30:[2,117],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},o($VE1,[2,119]),o($VE1,[2,121]),{51:[1,345],104:343,105:344,107:346,108:$VN1,109:347},{2:$Vc1,15:208,16:349,17:195,18:196,19:197,20:198,21:199,22:200,23:201,24:202,25:203,26:204,27:205,28:206,29:207,36:$Vd1,41:$V3,48:$V_,63:$V6,74:$Ve1,76:$Vf1,77:$Vg1,81:223,82:$V7,84:$V8,86:215,87:$V9,91:$Vh1,92:$Vi1,93:$Vj1,96:$Vk1,97:219,98:$Vl1,99:220,100:$Vm1,102:221,106:$Vn1,110:222,112:$Vo1,114:224,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{111:350,113:[1,351]},{15:352,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:353,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{49:[2,120],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{101:[1,354]},{49:[2,127],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},o($Vp1,[2,187]),{88:[1,355]},o($Vq1,[2,113]),{15:356,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($Vi,[2,50]),{41:[1,357]},{36:[1,358]},o($Vi,[2,47]),{36:$V31,48:$V_,54:$V41,68:244,79:359,80:245,82:$Vu1,86:180},{36:[1,361],63:[1,365],81:360,114:363,131:362,137:[1,364]},o($V$,[2,158]),o($V$,[2,161],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V$,[2,162]),o($Vv1,[2,171]),o($V$,[2,163],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($V$,[2,64]),{63:[1,367],71:366},o($VM1,[2,95],{101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}),o($VA1,[2,89]),{36:[1,368]},{84:[1,369]},{85:[1,370]},{88:[1,371]},o($VA1,[2,94]),o($VD1,[2,39]),o($V$,$V01,{127:18,115:19,120:20,130:21,131:22,135:23,81:24,114:25,138:27,142:28,143:30,147:31,145:32,134:94,132:155,15:156,133:157,75:372,36:$V11,41:$V3,63:$V6,69:$VK,82:$V7,84:$V8,87:$V9,136:$Va,137:$Vb,144:$Vc,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh}),{15:373,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{15:374,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{36:[1,375]},{30:[2,137],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{88:[1,376]},{15:377,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{51:[1,379],105:378,107:380,108:$VN1,109:347},{51:[1,381]},o($VE1,[2,126]),{49:$VG1,103:382},{49:$VG1,103:383},{49:[2,133],106:[1,384]},o([51,108,113],[2,131],{127:18,115:19,120:20,130:21,131:22,135:23,138:27,142:28,143:30,147:31,145:32,18:196,19:197,20:198,21:199,22:200,23:201,24:202,25:203,26:204,27:205,28:206,29:207,15:208,86:215,97:219,99:220,102:221,110:222,81:223,114:224,17:279,2:$Vc1,36:$Vd1,41:$V3,48:$V_,63:$V6,74:$Ve1,76:$Vf1,77:$Vg1,82:$V7,84:$V8,87:$V9,91:$Vh1,92:$Vi1,93:$Vj1,96:$Vk1,98:$Vl1,100:$Vm1,106:$Vn1,112:$Vo1,136:$Va,137:$Vb,144:$Vc,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh}),{49:$VY,58:385},{49:[2,136]},{30:[2,138],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{30:[2,139],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{15:386,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($Vp1,[2,188]),{30:[2,43],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},o($VI1,[2,99]),o($VI1,[2,101]),o($VJ1,[2,81]),o($VJ1,[2,83],{40:$VE,63:$VF,84:$VG}),o($VJ1,[2,84],{40:$VN,63:$VO,84:$VP}),{40:$VC},{40:$VI,63:$VJ},{40:$VQ,84:$VR},{15:387,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{37:[1,388]},o($V$,[2,70],{86:140,73:389,44:390,36:$VZ,48:$V_}),o($VA1,$VB1,{70:391,72:$VC1}),{36:$Vr1,41:$Vs1,55:392,89:237,90:238},{36:[1,393]},{36:[1,394]},{39:$Vw1,65:[1,395]},{30:[2,103],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{30:[2,106],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{30:[2,105],45:[1,396]},{36:[1,397]},{30:[2,111],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{51:[1,398]},o($VE1,[2,124]),{49:$VG1,103:399},o($VE1,[2,125]),o($VO1,[2,128]),{51:[2,132]},{15:400,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($VE1,[2,134]),{49:[2,122],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{65:[1,401],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{36:$VZ,44:402,48:$V_,86:140},{39:[1,404],65:[1,403]},o($V$,[2,71]),o($VA1,[2,90]),{85:[1,405]},o($VA1,$VB1,{70:406,72:$VC1}),o($VA1,$VB1,{70:407,72:$VC1}),{30:[2,75]},{15:408,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},{30:[2,108],45:[1,409]},o($VE1,[2,123]),o($VO1,[2,129]),{49:[2,130],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{40:$Vx1},o($V$,[2,66]),{37:[2,69]},{36:$VZ,44:410,48:$V_,86:140},o($VA1,[2,91]),o($VA1,[2,92]),o($VA1,[2,93]),{30:[2,107],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx},{15:411,36:$V2,41:$V3,63:$V6,81:24,82:$V7,84:$V8,87:$V9,114:25,115:19,120:20,127:18,130:21,131:22,135:23,136:$Va,137:$Vb,138:27,142:28,143:30,144:$Vc,145:32,147:31,148:$Vd,149:$Ve,150:$Vf,151:$Vg,152:$Vh},o($V$,[2,72]),{30:[2,109],101:$Vk,106:$Vl,116:$Vm,117:$Vn,118:$Vo,119:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:$Vv,128:$Vw,129:$Vx}],
defaultActions: {3:[2,2],47:[2,1],73:[2,41],95:[2,164],137:[2,53],150:[2,49],151:[2,46],191:[2,33],192:[2,35],228:[2,135],229:[2,54],235:[2,61],290:[2,76],291:[2,77],351:[2,136],383:[2,132],395:[2,75],403:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const fs = require('fs');
    const path = require('path');
	const SymbolScopes = require('./SymbolScopes');
	const ErrorManager = require('./ErrorManager');
	const ImportManager = require('./ImportManager');
	const Symbol = require('./Symbol');
	
	function createParser (yy) {
		const parser = new Parser();
		
		// Either pass symbolScopes object (for inline parsing)
		// Or make a new one
		const symbolScopes = yy ? yy.symbolScopes : new SymbolScopes(); //envpath);
		
		// I use yy to pass variables to the newly created parser
		parser.yy = {
			symbolScopes: symbolScopes, // symbol table
			selfStack: yy ? yy.selfStack : [], // holder stack for current SELF object symbol
			funcStack: yy ? yy.funcStack: [] // holder stack for current function symbol		
		}
		
		parser.originalParse = parser.parse;
		parser.parse = function (input, ctx) {
			// here we add global imports to the input source code
			// do not add global imports on inlineparses
			var fileName = path.basename(ctx.filePath, '.جني');
			input = ( ctx.inlineParse ? '' : SymbolScopes.autoImportText(ctx.filePath) ) + input;
			try {
				var result = parser.originalParse(input, ctx);
				// result is the parsed file's global scope;
				if (result.setSourceFile) {
					result.setSourceFile(fileName);
				}
				return result;
			} catch (e) {
				// exception while parsing, lets show errors
				console.log(e);
				ErrorManager.printAll();
			}
		}
		
		return parser;
	}
	
	// override default error handler
	parser.parseError = function (str, hash) {
		ErrorManager.error(
			"لم يتوقع: '" + hash.text + "'" + '\n' + str
		);
		ErrorManager.printAll();
	}
	
	function inlineParse(s, context, yy) {
		if (!s.endsWith('؛')) {
			s += '؛';
		}
		const createParser = require('./jparser');
		const _parser = createParser(yy);
		try {
			const scope = _parser.parse(s, {
				inlineParse: true,
				filePath: context.filePath,
				projectPath: path.resolve(context.projectPath),
				outPath: context.outPath
			});
			return scope;
		} catch (e) {
			console.log(e);
			ErrorManager.printAll();
		}
	}

	// JNX logic
	
	let htmtags = "رئس:head,جسم:body,قسم:div,ميطا:meta,عنوان:title,حيز:span,رابط:a,تدييل:footer,ترويس:header,صورة:img,ئدخال:input,سمة:style,مربعنص:textarea,مائل:i,فجوة:slot,منسق:pre,ئفريم:iframe"
		.replaceAll(":", '":"').replaceAll(',', '","');
	let htmatts = "مصدر:src,ئصل:rel,عنونت:href,لئجل:for,معرف:id,ستنب:placeholder,معطل:disabled,مطلوب:required,مختار:checked,محدد:selected,ئسم:name,قيمة:value,محتوا:content,صنف:class,طول:height,عرض:width,سمة:style,قابلتعديل:contenteditable"
		.replaceAll(":", '":"').replaceAll(',', '","');
		
	function processJNX(src, context, yy) {
		// validate it first
		validateJNX(src);
		
		// unescape parenthesis
		src = src.replaceAll('\\(', '(').replaceAll('\\)', ')');
		
		// tags
		var tags = JSON.parse('{"' + htmtags + '"}');
		for (var tag in tags) {
			var rg = RegExp(`(?<=[\\<\\/])${tag}(?=[\\s\\>])` ,'g');
			src = src.replace(rg, tags[tag]);
		}
		// add x- to arabic tags
		src = src.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
		// attrs
		var attrs = JSON.parse('{"' + htmatts + '"}');
		for (var att in attrs) {
			var rg = RegExp(`(?<=\\<((?!x-)[\\s\\S])*\\s+)${att}(?=[\\s]*=)`, 'g');
			src = src.replace(rg, attrs[att]);
		}
		src = processJNXControl(src, context, yy);
		src = src.replaceAll('_{', '${');
		src = src.replaceAll('%{', '${');
		return src;
	}
	
	function replaceWithX(s) {
		return s.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
	}
	
	function processJNXControl(s, context, yy) {
		var rg = RegExp('(<\\s*x-تكرار\\s*لكل\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*في\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*\\>)(((?!(\\<\\s*\\/\\s*x-تكرار\\s*\\>))[\\s\\S])*)(\\<\\s*\\/\\s*x-تكرار\\s*\\>)', 'g');
		while (s != (s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `"))) {}
		var rgCond = RegExp('(\\< *x-شرط *\\>)(((?!(\\< *\\/ *x-شرط *\\>))[\\s\\S])*)(\< *\\/ *x-شرط *\\>)', 'g');
		var rgWhen = RegExp('(\\< *x-عند * تحقق *= *\\")([^\\"]*)(\\" *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		var rgElse = RegExp('(\\< *x-عند * غيره *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		while (s != (
			s = s.replace(rgCond, "` + ($2 '') + `").
				replace(rgWhen, function ($0, $1, $2, $3, $4) {
					var result = inlineParse($2.replace('<x-', '<'), context, yy) + " ? `" + $4 + "` :";
					return result;
				}).replace(rgElse, "`$2` +")
		)) {}
		return '`' + s + '`';
	}
	
	function validateJNX (inputString) {
		const tagRegex = /<[^>]+>/g;
		const tags = inputString.match(tagRegex) || [];
		if (tags.length <= 1) {
			// no validation if there is only 1 tag or none
			return;
		}
		const stack = [];
		for (const tag of tags) {
			var myTag = tag;
			if (myTag.includes(' ')) {
				myTag = tag.split(' ')[0] + '>';
			}
			if (myTag.startsWith('</')) {
				// Closing tag
				const openingTag = stack.pop();
				if (!openingTag || !myTag.endsWith(openingTag.slice(1))) {
					// Mismatched closing tag
					if (openingTag) {
						ErrorManager.error("الئمارة " + openingTag + " غير متوازنة الفتح والئغلاق");
					} else {
						ErrorManager.error("الئمارة " + myTag.replace('/', '') + " غير متوازنة الفتح والئغلاق");
					}
					stack.pop();
				}
			} else if (myTag.endsWith('/>')) {
				// Self-closing tag
				continue;
			} else {
				// Opening tag
				stack.push(myTag);
			}
		}
		
		stack.forEach(badtag => {
			ErrorManager.error("الئمارة " + badtag + " غير متوازنة الفتح والئغلاق");
		});
	}

	// Utils
    function toEnDigit(s) {
		return s.replace(/[\u0660-\u0669]/g,
            function(a) { return a.charCodeAt(0) & 0xf }
        )
    }


module.exports = createParser;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: return false 
break;
case 2:/* skip comments */
break;
case 3:return 152
break;
case 4:return 106
break;
case 5:return 108
break;
case 6:return 51
break;
case 7:return 149
break;
case 8:return 150
break;
case 9:return 151
break;
case 10:return 91
break;
case 11:return 43
break;
case 12:return 69
break;
case 13:return 60
break;
case 14:return 48
break;
case 15:return 48
break;
case 16:return 54
break;
case 17:return 121
break;
case 18:return 122
break;
case 19:return 124
break;
case 20:return 126
break;
case 21:return 123
break;
case 22:return 125
break;
case 23:return 128
break;
case 24:return 129
break;
case 25:return 116
break;
case 26:return 117
break;
case 27:return 'RETURNS'
break;
case 28:return 118
break;
case 29:return 119
break;
case 30:return '%'
break;
case 31:return 63
break;
case 32:return 65
break;
case 33:return 84
break;
case 34:return 85
break;
case 35:return 87
break;
case 36:return 88
break;
case 37:return 49
break;
case 38:return 30
break;
case 39:return 39
break;
case 40:return 82
break;
case 41:return 40
break;
case 42:return 45
break;
case 43:return 72
break;
case 44:return 96
break;
case 45:return 137
break;
case 46:return 74
break;
case 47:return 76
break;
case 48:return 77
break;
case 49:return 100
break;
case 50:return 101
break;
case 51:return 98
break;
case 52:return 92
break;
case 53:return 93
break;
case 54:return 31
break;
case 55:return 42
break;
case 56:return 37
break;
case 57:return 'NEW'
break;
case 58:return 33
break;
case 59:return 38
break;
case 60:return 136
break;
case 61:return 144
break;
case 62:return 112
break;
case 63:return 113
break;
case 64:return 41 // Double quoted string
break;
case 65:return 41 // Single quoted string
break;
case 66:return 148  // Eastern Arabic numerals
break;
case 67:return 36
break;
case 68:return 148 // Western Arabic numerals
break;
case 69:return 5
break;
case 70:return 'UNKNOWN'
break;
}
},
rules: [/^(?:[ \t\v\f\r\n]+)/,/^(?:\n)/,/^(?:#[^\n]*)/,/^(?:\([\n\r\s]*<(?:[^)\\]|\\.|\\[\s\S])*>[\n\r\s]*\))/,/^(?:ئدا(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:وئلا(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:تم(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:صحيح(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:خطئ(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:عدم(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:دع(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئعلن(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:دالة(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:وعد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:بنية(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:مركب(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:تعداد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:==)/,/^(?:لا=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:وو(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئو(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:\+)/,/^(?:-)/,/^(?:->)/,/^(?:×)/,/^(?:÷)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:؛)/,/^(?:،)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:=)/,/^(?:؟)/,/^(?:ئرجع(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:هدا)/,/^(?:يمدد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يختصر(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يملك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:لكل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:في(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:طالما(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:قل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئشطب(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئورد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يعتمد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئنشئ(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:من(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:الكل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ريتما(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ليس(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:حاول(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئستدرك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:"(?:[^"\\]|\\[\s\S])*")/,/^(?:'[^'\n]*')/,/^(?:[\u0660-\u0669]+(\.[\u0660-\u0669]+)?)/,/^(?:[a-zA-Z_\u0621-\u064A][a-zA-Z0-9_\u0621-\u0669]*)/,/^(?:\d+(\.\d+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jparser;
exports.Parser = jparser.Parser;
exports.parse = function () { return jparser.parse.apply(jparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}